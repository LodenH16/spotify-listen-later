import React, { useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import SpotifyLoginButton from "../components/SpotifyLoginButton/index";
import ArtistProfile from "../components/ArtistProfile/ArtistProfile";
import { ArtistCardWrapper } from "../styles/styles";
import styles from "../styles/Home.module.css";
import { app } from "../firebase/clientApp";
import { getFunctions, connectFunctionsEmulator } from "firebase/functions";
import { getFirestore, connectFirestoreEmulator } from "firebase/firestore";
import { getAuth, connectAuthEmulator } from "firebase/auth";
import { useHttpsCallable } from "react-firebase-hooks/functions";
import { useForm } from "react-hook-form";
import { User } from "../types/index";

// init firebase services
const functions = getFunctions(app);
const db = getFirestore();
const auth = getAuth();
// connect firebase emulators
connectFunctionsEmulator(functions, "localhost", 5001);
connectFirestoreEmulator(db, "localhost", 8080);
connectAuthEmulator(auth, "http://localhost:9099");
//* uncomment the above lines to test firebase services locally

export default function Home() {
  const router = useRouter(); // Nextjs router to get url params for Spotify login
  // states
  const [user, setUser] = useState<User>();
  const [searchResults, setSearchResults] = useState(null);
  // Firebase Function Hooks https://github.com/CSFrequency/react-firebase-hooks
  const [searchArtists, searchArtistsExecuting, searchArtistsError] =
    useHttpsCallable(functions, "searchArtists");
  const [loginWithSpotify, loginWithSpotifyExecuting, loginWithSpotifyError] =
    useHttpsCallable<{ authCode: string }, User>(
      functions,
      "createUserWithSpotify"
    );
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm(); // form hook https://react-hook-form.com/

  useEffect(() => {
    // you have to define an async function in a useEffect
    const callLoginFunction = async (authCode: string) => {
      //console.log("router params: ", router.query.code);
      await loginWithSpotify({ authCode: authCode })
        .then((user) => setUser(user!.data))
        .catch((err) => console.error(err));
    };

    if (router.query.code) {
      console.log("sending the login function âœˆ");
      callLoginFunction(router.query.code[0]);
    }
  }, [router.query]);

  const searchArtistsSubmit = async (values) => {
    setSearchResults(await searchArtists(values.artistName));
  };

  //console.log(searchResults?.data || "nothing yet");
  console.log("user: ", user);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!user && <SpotifyLoginButton />}
      <button onClick={() => router.push("http://localhost:3000")}>
        reset url
      </button>
      {user && (
        <>
          <p>user exists!</p>
        </>
      )}
      <form onSubmit={handleSubmit(searchArtistsSubmit)}>
        <input {...register("artistName")} placeholder="Artist Name" />
        <button type="submit" disabled={searchArtistsExecuting}>
          Search Artists
        </button>
      </form>
      {searchResults && (
        <ArtistCardWrapper>
          {searchResults.data.body.artists.items.map((artist, index) => {
            return (
              <ArtistProfile key={`searchResult${index}`} props={artist} />
            );
          })}
        </ArtistCardWrapper>
      )}
    </div>
  );
}
